{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n/**\n * Copyright IBM Corp. 2016, 2018\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nimport React, { useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { settings } from 'carbon-components';\nimport { keys, matches } from '../../internal/keyboard';\nimport uniqueId from '../../tools/uniqueId';\nvar prefix = settings.prefix;\nexport default function FileUploaderDropContainer(props) {\n  var _classNames2;\n\n  var inputRef = useRef();\n\n  var accept = props.accept,\n      className = props.className,\n      id = props.id,\n      disabled = props.disabled,\n      labelText = props.labelText,\n      multiple = props.multiple,\n      name = props.name,\n      onAddFiles = props.onAddFiles,\n      role = props.role,\n      tabIndex = props.tabIndex,\n      other = _objectWithoutProperties(props, [\"accept\", \"className\", \"id\", \"disabled\", \"labelText\", \"multiple\", \"name\", \"onAddFiles\", \"role\", \"tabIndex\"]);\n\n  var uid = useRef(uniqueId());\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isActive = _useState2[0],\n      setActive = _useState2[1];\n\n  var labelClasses = classNames(\"\".concat(prefix, \"--file-browse-btn\"), _defineProperty({}, \"\".concat(prefix, \"--file-browse-btn--disabled\"), disabled));\n  var dropareaClasses = classNames(\"\".concat(prefix, \"--file__drop-container\"), (_classNames2 = {}, _defineProperty(_classNames2, \"\".concat(prefix, \"--file__drop-container--drag-over\"), isActive), _defineProperty(_classNames2, className, className), _classNames2));\n  /**\n   * Filters the array of added files based on file type restrictions\n   * @param {Event} evt - Event object, used to get the list of files added\n   */\n\n  var validateFiles = function validateFiles(evt) {\n    if (evt.type === 'drop') {\n      var acceptedTypes = new Set(accept);\n      return _toConsumableArray(evt.dataTransfer.files).filter(function (_ref) {\n        var name = _ref.name,\n            _ref$type = _ref.type,\n            mimeType = _ref$type === void 0 ? '' : _ref$type;\n        var fileExtensionRegExp = new RegExp(/\\.[0-9a-z]+$/, 'i');\n        var hasFileExtension = fileExtensionRegExp.test(name);\n\n        if (!hasFileExtension) {\n          return false;\n        }\n\n        var _name$match = name.match(fileExtensionRegExp),\n            _name$match2 = _slicedToArray(_name$match, 1),\n            fileExtension = _name$match2[0];\n\n        return acceptedTypes.has(mimeType) || acceptedTypes.has(fileExtension);\n      });\n    }\n\n    return _toConsumableArray(evt.target.files);\n  };\n\n  var handleChange = function handleChange(evt) {\n    var addedFiles = validateFiles(evt);\n    return onAddFiles(evt, {\n      addedFiles: addedFiles\n    });\n  };\n\n  return React.createElement(\"div\", {\n    className: \"\".concat(prefix, \"--file\"),\n    onDragOver: function onDragOver(evt) {\n      evt.stopPropagation();\n      evt.preventDefault();\n\n      if (disabled) {\n        return;\n      }\n\n      setActive(true);\n      evt.dataTransfer.dropEffect = 'copy';\n    },\n    onDragLeave: function onDragLeave(evt) {\n      evt.stopPropagation();\n      evt.preventDefault();\n\n      if (disabled) {\n        return;\n      }\n\n      setActive(false);\n      evt.dataTransfer.dropEffect = 'move';\n    },\n    onDrop: function onDrop(evt) {\n      evt.stopPropagation();\n      evt.preventDefault();\n\n      if (disabled) {\n        return;\n      }\n\n      setActive(false);\n      handleChange(evt);\n    }\n  }, React.createElement(\"label\", _extends({\n    className: labelClasses,\n    htmlFor: id || uid.current,\n    role: role || 'button',\n    tabIndex: tabIndex || 0,\n    onKeyDown: function onKeyDown(evt) {\n      if (matches(evt, [keys.Enter, keys.Space])) {\n        inputRef.current.click();\n      }\n    }\n  }, other), React.createElement(\"div\", {\n    className: dropareaClasses\n  }, labelText, React.createElement(\"input\", {\n    type: \"file\",\n    id: id || uid.current,\n    className: \"\".concat(prefix, \"--file-input\"),\n    ref: inputRef,\n    tabIndex: \"-1\",\n    disabled: disabled,\n    accept: accept,\n    name: name,\n    multiple: multiple,\n    onChange: handleChange,\n    onClick: function onClick(evt) {\n      evt.target.value = null;\n    }\n  }))));\n}\nFileUploaderDropContainer.propTypes = {\n  /**\n   * Provide a custom className to be applied to the container node\n   */\n  className: PropTypes.string,\n\n  /**\n   * Provide a unique id for the underlying <input> node\n   */\n  id: PropTypes.string,\n\n  /**\n   * Provide the label text to be read by screen readers when interacting with\n   * this control\n   */\n  labelText: PropTypes.string.isRequired,\n\n  /**\n   * Specify if the component should accept multiple files to upload\n   */\n  multiple: PropTypes.bool,\n\n  /**\n   * Provide a name for the underlying <input> node\n   */\n  name: PropTypes.string,\n\n  /**\n   * Provide an accessibility role for the <FileUploaderButton>\n   */\n  role: PropTypes.string,\n\n  /**\n   * Provide a custom tabIndex value for the <FileUploaderButton>\n   */\n  tabIndex: PropTypes.number,\n\n  /**\n   * Specify whether file input is disabled\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Specify the types of files that this input should be able to receive\n   */\n  accept: PropTypes.arrayOf(PropTypes.string),\n\n  /**\n   * Event handler that is called after files are added to the uploader\n   * The event handler signature looks like `onAddFiles(evt, { addedFiles })`\n   */\n  onAddFiles: PropTypes.func\n};\nFileUploaderDropContainer.defaultProps = {\n  tabIndex: 0,\n  labelText: 'Add file',\n  multiple: false,\n  onAddFiles: function onAddFiles() {},\n  accept: []\n};","map":null,"metadata":{},"sourceType":"module"}